"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[666],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=s(r),g=a,h=u["".concat(l,".").concat(g)]||u[g]||c[g]||o;return r?n.createElement(h,i(i({ref:t},d),{},{components:r})):n.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4347:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={order:6,title:"Upgrading the Chain"},i="Live Upgrade Tutorial",p={unversionedId:"devs/tutorials/live-upgrade-tutorial",id:"devs/tutorials/live-upgrade-tutorial",title:"Upgrading the Chain",description:"This document demonstrates how a live upgrade can be performed on-chain through a",source:"@site/docs/devs/tutorials/live-upgrade-tutorial.md",sourceDirName:"devs/tutorials",slug:"/devs/tutorials/live-upgrade-tutorial",permalink:"/docs/docs/devs/tutorials/live-upgrade-tutorial",draft:!1,tags:[],version:"current",frontMatter:{order:6,title:"Upgrading the Chain"},sidebar:"devsSidebar",previous:{title:"Joining Testnet",permalink:"/docs/docs/devs/tutorials/join-testnet"},next:{title:"txs",permalink:"/docs/docs/devs/tutorials/txs"}},l={},s=[],d={toc:s},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"live-upgrade-tutorial"},"Live Upgrade Tutorial"),(0,a.kt)("p",null,"This document demonstrates how a live upgrade can be performed on-chain through a\ngovernance process."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Start the network and trigger upgrade"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# start a gaia application full-node\n$ crossfid start\n\n# set up the cli config\n$ crossfid config trust-node true\n$ crossfid config chain-id testing\n\n# create an upgrade governance proposal\n$ crossfid tx gov submit-proposal software-upgrade <plan-name> \\\n--title <proposal-title> --description <proposal-description> \\\n--from <name-or-key> --upgrade-height <desired-upgrade-height> --deposit 10000000mpx\n\n# once the proposal passes you can query the pending plan\n$ crossfid query upgrade plan\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Performing an upgrade"),(0,a.kt)("p",{parentName:"li"},"Assuming the proposal passes the chain will stop at given upgrade height."),(0,a.kt)("p",{parentName:"li"},"You can stop and start the original binary all you want, but ",(0,a.kt)("strong",{parentName:"p"},"it will refuse to\nrun after the upgrade height"),"."),(0,a.kt)("p",{parentName:"li"},"We need a new binary with the upgrade handler installed. The logs should look\nsomething like:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'E[2019-11-05|12:44:18.913] UPGRADE "<plan-name>" NEEDED at height: <desired-upgrade-height>:       module=main\nE[2019-11-05|12:44:18.914] CONSENSUS FAILURE!!!\n...\n')),(0,a.kt)("p",{parentName:"li"},"Note that the process will hang indefinitely (doesn't exit to avoid restart loops). So, you must\nmanually kill the process and replace it with a new binary. Do so now with ",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+C")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"killall crossfid"),"."),(0,a.kt)("p",{parentName:"li"},"In ",(0,a.kt)("inlineCode",{parentName:"p"},"gaia/app/app.go"),", after ",(0,a.kt)("inlineCode",{parentName:"p"},"upgrade.Keeper")," is initialized and set in the app, set the\ncorresponding upgrade ",(0,a.kt)("inlineCode",{parentName:"p"},"Handler")," with the correct ",(0,a.kt)("inlineCode",{parentName:"p"},"<plan-name>"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},'    app.upgradeKeeper.SetUpgradeHandler("<plan-name>", func(ctx sdk.Context, plan upgrade.Plan) {\n        // custom logic after the network upgrade has been executed\n    })\n')),(0,a.kt)("p",{parentName:"li"},"Note that we panic on any error - this would cause the upgrade to fail if the\nmigration could not be run, and no node would advance - allowing a manual recovery.\nIf we ignored the errors, then we would proceed with an incomplete upgrade and\nhave a very difficult time every recovering the proper state."),(0,a.kt)("p",{parentName:"li"},"Now, compile the new binary and run the upgraded code to complete the upgrade:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# create a new binary of gaia with the added upgrade handler\n$ make install\n\n# Restart the chain using the new binary. You should see the chain resume from\n# the upgrade height:\n# `I[2019-11-05|12:48:15.184] applying upgrade <plan-name> at height: <desired-upgrade-height>      module=main`\n$ crossfid start\n\n# verify there is no pending plan\n$ crossfid query upgrade plan\n\n# verify you can query the block header of the completed upgrade\n$ crossfid query upgrade applied <plan-name>\n")))))}c.isMDXComponent=!0}}]);