"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6280],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,h=u["".concat(l,".").concat(g)]||u[g]||c[g]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={order:6,title:"Upgrading the Chain"},i="Live Upgrade Tutorial",p={unversionedId:"node/tutorials/live-upgrade-tutorial",id:"node/tutorials/live-upgrade-tutorial",title:"Upgrading the Chain",description:"This document demonstrates how a live upgrade can be performed on-chain through a",source:"@site/docs/node/tutorials/live-upgrade-tutorial.md",sourceDirName:"node/tutorials",slug:"/node/tutorials/live-upgrade-tutorial",permalink:"/docs/docs/node/tutorials/live-upgrade-tutorial",draft:!1,editUrl:"https://github.com/crossfichain/docs/tree/master/docs/node/tutorials/live-upgrade-tutorial.md",tags:[],version:"current",frontMatter:{order:6,title:"Upgrading the Chain"},sidebar:"nodeSidebar",previous:{title:"Joining Mainnet",permalink:"/docs/docs/node/tutorials/join-mainnet"},next:{title:"txs",permalink:"/docs/docs/node/tutorials/txs"}},l={},d=[],s={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"live-upgrade-tutorial"},"Live Upgrade Tutorial"),(0,a.kt)("p",null,"This document demonstrates how a live upgrade can be performed on-chain through a\ngovernance process."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Start the network and trigger upgrade"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# start a gaia application full-node\n$ crossfid start\n\n# set up the cli config\n$ crossfid config trust-node true\n$ crossfid config chain-id testing\n\n# create an upgrade governance proposal\n$ crossfid tx gov submit-proposal software-upgrade <plan-name> \\\n--title <proposal-title> --description <proposal-description> \\\n--from <name-or-key> --upgrade-height <desired-upgrade-height> --deposit 10000000mpx\n\n# once the proposal passes you can query the pending plan\n$ crossfid query upgrade plan\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Performing an upgrade"),(0,a.kt)("p",{parentName:"li"},"Assuming the proposal passes the chain will stop at given upgrade height."),(0,a.kt)("p",{parentName:"li"},"You can stop and start the original binary all you want, but ",(0,a.kt)("strong",{parentName:"p"},"it will refuse to\nrun after the upgrade height"),"."),(0,a.kt)("p",{parentName:"li"},"We need a new binary with the upgrade handler installed. The logs should look\nsomething like:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'E[2019-11-05|12:44:18.913] UPGRADE "<plan-name>" NEEDED at height: <desired-upgrade-height>:       module=main\nE[2019-11-05|12:44:18.914] CONSENSUS FAILURE!!!\n...\n')),(0,a.kt)("p",{parentName:"li"},"Note that the process will hang indefinitely (doesn't exit to avoid restart loops). So, you must\nmanually kill the process and replace it with a new binary. Do so now with ",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+C")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"killall crossfid"),"."),(0,a.kt)("p",{parentName:"li"},"In ",(0,a.kt)("inlineCode",{parentName:"p"},"gaia/app/app.go"),", after ",(0,a.kt)("inlineCode",{parentName:"p"},"upgrade.Keeper")," is initialized and set in the app, set the\ncorresponding upgrade ",(0,a.kt)("inlineCode",{parentName:"p"},"Handler")," with the correct ",(0,a.kt)("inlineCode",{parentName:"p"},"<plan-name>"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},'    app.upgradeKeeper.SetUpgradeHandler("<plan-name>", func(ctx sdk.Context, plan upgrade.Plan) {\n        // custom logic after the network upgrade has been executed\n    })\n')),(0,a.kt)("p",{parentName:"li"},"Note that we panic on any error - this would cause the upgrade to fail if the\nmigration could not be run, and no node would advance - allowing a manual recovery.\nIf we ignored the errors, then we would proceed with an incomplete upgrade and\nhave a very difficult time every recovering the proper state."),(0,a.kt)("p",{parentName:"li"},"Now, compile the new binary and run the upgraded code to complete the upgrade:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# create a new binary of gaia with the added upgrade handler\n$ make install\n\n# Restart the chain using the new binary. You should see the chain resume from\n# the upgrade height:\n# `I[2019-11-05|12:48:15.184] applying upgrade <plan-name> at height: <desired-upgrade-height>      module=main`\n$ crossfid start\n\n# verify there is no pending plan\n$ crossfid query upgrade plan\n\n# verify you can query the block header of the completed upgrade\n$ crossfid query upgrade applied <plan-name>\n")))))}c.isMDXComponent=!0}}]);